#!/bin/bash

#
# MIT License
#
# Copyright (c) 2020 Jinho Ko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#


#######################
### Parse arguments ###
#######################
display_help() {
    echo "Usage: $(basename "$0") [option...] <NUM_SLAVES> " >&2
    echo
    echo "   -h, --help           display help"
    echo
    echo "   <NUM_SLAVES>        number of slaves"
    echo
}

##########################
### Optional arguments ###
##########################
while :
do
    case "$1" in
      -h | --help)
          display_help
          exit 0
          ;;
      --) # End of all options
          shift
          break
          ;;
      -*)
          echo "Error: Unknown option: $1" >&2
          exit 1
          ;;
      *)  # No more options
          break
          ;;
    esac
done

###########################
### Mandatory arguments ###
###########################
[ -z $1 ] && echo "Error: Argument <NUM_SLAVES> missing" && exit 1
[ "$1" -ge 1 ] 2>/dev/null || (echo "Error: Invalid argument <NUM_SLAVES>: ${1}" && exit 1)
num_slaves=$1

################
### Check OS ###
################
platform=""
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  platform="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  platform="macos"
else
  echo "Error : Unsupported OS" && exit 1
fi

#######################
### Set DPSORT_HOME ###
#######################
filepath=""
if [[ "$platform" == "linux" ]]; then
  filepath=$(readlink -f "$0")
elif [[ "$platform" == "macos" ]]; then
  filepath=$(echo "$(cd $(dirname "$0");pwd)/$(basename "$0")")
fi
filedir=$(dirname "$filepath")
homedir=$(dirname "$filedir")
export DPSORT_HOME="$homedir"
cd $DPSORT_HOME || exit 1

###################################
### Validate configuration file ###
###################################
conffilepath="${homedir}/conf/master-conf.properties"
if [ ! -f "$conffilepath" ]; then
  echo "Error : config file ${conffilepath} does not exist"
  exit 1
fi

#######################
### Execute program ###
#######################
export DPSORT_SCALA_VERSION="2.12"
export DPSORT_VERSION="0.1.0"

sbt -Dlog4j.configurationFile=$DPSORT_HOME/conf/log4j2.xml \
"master/run ${num_slaves}"

#java -Dlog4j.configurationFile=$DPSORT_HOME/conf/log4j2.xml \
#-jar $DPSORT_HOME/master/target/scala-${DPSORT_SCALA_VERSION}/master-assembly-${DPSORT_VERSION}-SNAPSHOT.jar \
#Main

#java -Dlog4j.configurationFile=$DPSORT_HOME/conf/log4j2.xml \
#-jar $DPSORT_HOME/target/scala-${DPSORT_SCALA_VERSION}/dpsort-assembly-${DPSORT_VERSION}.jar \
#Main

exit 0