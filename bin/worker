#!/bin/bash

#######################
### Parse arguments ###
#######################
display_help() {
    echo "Usage: $(basename "$0") [option...] <MASTER_IPPORT> -I <dir1> <dir2> .. -O <dir> " >&2
    echo
    echo "   -h, --help                    display help"
    echo
    echo "   <MASTER_IPPORT>               master IP:PORT"
    echo "   -I, --input <dir1> <dir2> ..  input directories"
    echo "   -O, --output <dir>            output directory"
    echo
}

########################
### Argument parsing ###
########################
while :
do
    case "$1" in
      -h | --help)
          display_help
          exit 0
          ;;
      --) # End of all options
          shift
          break
          ;;
      -*)
          echo "Error: Invalid/Unknown option: $1" >&2
          exit 1
          ;;
      *)  # No more options
          break
          ;;
    esac
done

###########################
### Mandatory arguments ###
###########################
[ -z $1 ] && echo "Error: Argument <MASTER_IPPORT> missing" && exit 1
ipport=$1
shift

##########################
### Argument parsing 2 ###
##########################
inputdirs=()
outputdir=""
while :
do
    case "$1" in
      -I | --input)
          shift
          while :
          do
              case "$1" in
                "") break;;
                -*) break;;
                *) inputdirs+=( "$1" ) ; shift;;
              esac
          done;;
      -O | --output)
          shift
          while :
          do
              case "$1" in
                "") break;;
                -*) break;;
                *) outputdir="$1"; shift; break;;
              esac
          done;;
      -*)
          echo "Error: Unknown option: $1" >&2; exit 1;;
      *)
          break;;
    esac
done

#######################
# Argument checking ###
#######################
#echo $outputdir
#( IFS=$'\n'; echo "${inputdirs[*]}" )
if [ "${#inputdirs[@]}" -lt 1 ]
then
  echo "Error: Wrong number of input path(s) provided"
  exit 1
fi
[[ "$outputdir" == "" ]] && echo "Error: No output path provided" && exit 1

#################################
# IP/PORT and directory check ###
#################################
ip="";port=""
IFS=':'
read -ra ipportarray <<< "$ipport"
ip="${ipportarray[0]}"
port="${ipportarray[1]}"

[[ "$ip" == "" || "$port" == ""  ]] && echo "Error: Invalid argument <MASTER_IPPORT> : $ipport" && exit 1

for dir in $inputdirs; do
    if [ ! -d $dir ] ; then
      echo "Error: Directory not found : $dir" && exit 1
    fi
done
if [ ! -d $outputdir ] ; then
      echo "Error: Directory not found : $outputdir" && exit 1
fi

################
### Check OS ###
################
platform=""
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  platform="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  platform="macos"
else
  echo "Error : Unsupported OS" && exit 1
fi

getAbsPath_result=""
function getAbsPath {
  _inputpath=$1
  _platform=$2
  _filepath=""
  if [[ "$_platform" == "linux" ]]; then
    _filepath=$(readlink -f "$_inputpath")
  elif [[ "$platform" == "macos" ]]; then
    _filepath=$(echo "$(cd $(dirname "$_inputpath");pwd)/$(basename "$_inputpath")")
  fi
  getAbsPath_result=$_filepath
}

###########################################
### Change input paths to absolute path ###
###########################################
getAbsPath $outputdir $platform
outputdir=$getAbsPath_result

for i in "${!inputdirs[@]}"; do
    getAbsPath ${inputdirs[i]} $platform
    inputdirs[i]=$getAbsPath_result
done

########################
### Empty output dir ###
#########################
rm -rf $outputdir
mkdir $outputdir

#######################
### Set DPSORT_HOME ###
#######################
getAbsPath $0 $platform
filepath=$getAbsPath_result

filedir=$(dirname "$filepath")
homedir=$(dirname "$filedir")
export DPSORT_HOME="$homedir"
cd $DPSORT_HOME || exit 1


###################################
### Validate configuration file ###
###################################
conffilepath="${homedir}/conf/worker-conf.properties"
if [ ! -f "$conffilepath" ]; then
  echo "Error : config file ${conffilepath} does not exist"
  exit 1
fi


#######################
### Execute program ###
#######################
export DPSORT_SCALA_VERSION="2.13"
export DPSORT_VERSION="0.1.0"

IFS=" "

sbt -Dlog4j.configurationFile=$DPSORT_HOME/conf/log4j2.xml \
"worker/run ${ip} ${port} ${outputdir} ${inputdirs[*]}"

#java -Dlog4j.configurationFile=$DPSORT_HOME/conf/log4j2.xml \
#-jar $DPSORT_HOME/worker/target/scala-${DPSORT_SCALA_VERSION}/worker-assembly-${DPSORT_VERSION}-SNAPSHOT.jar \
#Main

exit 0