syntax = "proto3";

package dpsort.core;

/*
 * Service Definition
 */
service MasterTaskService {
  rpc RegisterWorker (RegistryMsg) returns (ResponseMsg) {}
  rpc ReportTaskResult (TaskReportMsg) returns (ResponseMsg) {}
}

service WorkerTaskService {
  rpc RequestTask (TaskMsg) returns (ResponseMsg) {}
}

service HeartBeatService {
  rpc HeartBeatReport (HeartBeatMsg) returns (ResponseMsg) {}
}

service ShuffleService {
  rpc RequestShuffle (ShuffleRequestMsg) returns (ResponseMsg) {}
  rpc SendShuffleData (ShuffleDataMsg) returns (ResponseMsg) {}
}


/*
 * Message Definition
 */
message RegistryMsg {
  // We send bytes-serialized object directly
  // rather than elaborate message definition
  // due to its complexity
  bytes serializedRegistryObject = 1;
}

message TaskMsg {
  // We send bytes-serialized object directly
  // rather than elaborate message definition
  // due to its complexity
  bytes serializedTaskObject = 1;
}

message TaskReportMsg {
  enum TaskResultType {
    SUCCESS = 0;
    FAILED = 1;
  }
  int32 taskId = 1;
  TaskResultType taskResult = 2;
  bytes serializedTaskResultData = 3;
}

message ResponseMsg {
  enum ResponseType {
    NORMAL = 0;           // Request accepted by server
    HANDLE_ERROR = 1;     // Error occured when handling request from server side
    REQUEST_ERROR = 2;    // Error occured when trying to request
  }
  ResponseType response = 1;
}

message HeartBeatMsg {
  enum HeartBeatType {
    ALIVE = 0;
  }
  HeartBeatType heartBeat = 1;
}

message ShuffleRequestMsg {
  // Empty
}

message ShuffleDataMsg {
  bytes serializedPartitionName = 1;
  bytes serializedShuffleData = 2;
}
