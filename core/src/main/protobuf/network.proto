syntax = "proto3";

package dpsort.core;

/*
 * Service Definition
 */
service MasterTaskService {
  rpc RegisterWorker (RegistryMsg) returns (ResponseMsg) {}
  rpc ReportTaskResult (TaskReportMsg) returns (ResponseMsg) {}
}

service WorkerTaskService {
  rpc RequestTask (TaskMsg) returns (ResponseMsg) {}
}

service HeartBeatService {
  rpc HeartBeatReport (HeartBeatMsg) returns (ResponseMsg) {}
}

// TODO phase 3
//service ShuffleService {
//  // not sure
//  rpc RequestShuffle (ShuffleRequestMsg) returns (ResponseMsg) {}
//  rpc SendShuffleData (ShuffleDataMsg) returns (ResponseMsg) {}
//}


/*
 * Message Definition
 */
message RegistryMsg {
  // We send bytes-serialized object directly
  // rather than elaborate message definition
  // due to its complexity
  bytes serializedRegistryObject = 1;
}

message TaskMsg {
  // We send bytes-serialized object directly
  // rather than elaborate message definition
  // due to its complexity
  enum TaskObjectType {
    GenBlockTask = 0;
    TerminateTask = 1;
    // and another 4 tasks
  }
  bytes serializedTaskObject = 1;
}

message TaskReportMsg {
  enum TaskResultType {
    SUCCESS = 0;
    FAILED = 1;
  }
  int32 taskId = 1;
  TaskResultType taskResult = 2;
  bytes serializedTaskResultData = 3;
}

message ResponseMsg {
  enum ResponseType {
    NORMAL = 0;
    HANDLE_ERROR = 1;
  }
  ResponseType response = 1;
}

message HeartBeatMsg {
  enum HeartBeatType {
    ALIVE = 0;
  }
  HeartBeatType heartBeat = 1;
}

// TODO phase 3
//message ShuffleRequestMsg {
//
//}
//
//message ShuffleDataMsg {
//  // ShuffleDataType
//  sint32 a = 1;
//  sint32 b = 2;
//}
// use serialized object? or use repeaded protobuf definition? (repeated => Seq)