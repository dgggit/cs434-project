/*
 * MIT License
 *
 * Copyright (c) 2020 Jinho Ko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

syntax = "proto3";

package dpsort.core;

/*
 * Service Definition
 */
service MasterTaskService {
  rpc RegisterWorker (RegistryMsg) returns (ResponseMsg) {}
  rpc ReportTaskResult (TaskReportMsg) returns (ResponseMsg) {}
}

service WorkerTaskService {
  rpc RequestTask (TaskMsg) returns (ResponseMsg) {}
}

service ShuffleService {
  rpc RequestShuffle (ShuffleRequestMsg) returns (ResponseMsg) {}
  rpc SendShuffleData (ShuffleDataMsg) returns (ResponseMsg) {}
  rpc TerminateShuffle (ShuffleRequestMsg) returns (ResponseMsg) {}
}


/*
 * Message Definition
 */
message RegistryMsg {
  // We send bytes-serialized object directly
  // rather than elaborate message definition
  // due to its complexity
  bytes serializedRegistryObject = 1;
}

message TaskMsg {
  // We send bytes-serialized object directly
  // rather than elaborate message definition
  // due to its complexity
  bytes serializedTaskObject = 1;
}

message TaskReportMsg {
  enum TaskResultType {
    SUCCESS = 0;
    FAILED = 1;
  }
  int32 taskId = 1;
  TaskResultType taskResult = 2;
  bytes serializedTaskResultData = 3;
}

message ResponseMsg {
  enum ResponseType {
    NORMAL = 0;           // Request accepted by server
    HANDLE_ERROR = 1;     // Error occured when handling request from server side
    REQUEST_ERROR = 2;    // Error occured when trying to request
  }
  ResponseType response = 1;
}

message ShuffleRequestMsg {
  // Empty
}

message ShuffleDataMsg {
  bytes serializedPartitionName = 1;
  bytes serializedShuffleData = 2;
}
